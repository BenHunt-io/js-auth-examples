import * as jose from 'jose';
import React from 'react';
import { Buffer } from 'buffer';
import { Col, Container, Row } from 'react-bootstrap';


const pubKeyAlgo = { 
  
  name: "RSA-OAEP", 
  modulusLength: 4096,
  publicExponent: new Uint8Array([1, 0, 1]), // 65537
  hash: "SHA-256" 

};

export class App extends React.Component {

  constructor(props) {
    super(props);

    this.state = {}

    this.onLogin = this.onLogin.bind(this);
    this.onCreateAccount = this.onCreateAccount.bind(this);

    // Need this library to allow users to toggle visibility of password
    import('bootstrap-show-password-toggle/js/show-password-toggle.js');

    fetch(new URL("http://localhost:4000/login/publicKey"))
      .then(res => res.json())
      .then(jsonPubKey => {
        return generateEncryptedExportedSymmetricKey(jsonPubKey);
      })
      .then(encryptedExportedSymmetricKey => {
        return fetch(new URL("http://localhost:4000/login/symmetricKey"), {
          method: "POST",
          headers: {
            'Content-Type' : "application/json;charset=utf8",
            'Accept' : "application/json;charset=utf8"
          },
          body: JSON.stringify({
            symmetricKey: encryptedExportedSymmetricKey
          })
        })
        .then(() => {
          console.log("Secure communications established");
        })
      });
  }

  onLogin() {
    let passwordBuffer = Buffer.from(this.state.password, 'utf8');
    window.crypto.subtle.encrypt(pubKeyAlgo, this.state.pubKey, passwordBuffer)
      .then(encryptedPassword => {

        console.log(Buffer.from(Buffer.from(encryptedPassword).toString('base64')));

        return fetch(new URL("http://localhost:4000/login"), {
          method: 'POST',
          headers: {
            'Content-Type' : "application/json;charset=utf8",
            'Accept' : '*/*',
          },
          body: JSON.stringify({
            username: this.state.username,
            password: Buffer.from(encryptedPassword).toString('base64')
          })
        })
      })
      .then(res => res.json())
      .then(loginResponse => {
        console.log(loginResponse);
      })
  }

  onCreateAccount(){
    let passwordBuffer = Buffer.from(this.state.password, 'utf8');
    window.crypto.subtle.encrypt(pubKeyAlgo, this.state.pubKey, passwordBuffer)
      .then(encryptedPassword => {
        return fetch(new URL("http://localhost:4000/user"), {
          method: 'POST',
          headers: {
              'Content-Type' : "application/json;charset=utf8",
              'Accept' : '*/*',
          },
          body: JSON.stringify({
            username: this.state.username,
            password: Buffer.from(encryptedPassword).toString('base64')
          })
        })
      })
      .then(res => res.json())
      .then(user => {
        console.log(`User created: ${user}`);
      })
  
  }

  render() {
    return (
      <div className="container py-5">
        <div className="row justify-content-center py-2">
          <div className="col-4">
            <div className="form-floating">
              <input id="usernameInput" onChange={(e) => this.setState({ username: e.target.value })}
                className="form-control" placeholder='Username' />
              <label for="usernameInput">Username</label>
            </div>
          </div>
        </div>

        <div className="row justify-content-center py-2">
          <div className="col-4">
            <div className="form-floating">
              <input type='password' id="passwordInput" className="form-control"
                onChange={(e) => this.setState({ password: e.target.value })} placeholder='Password' />
              <button id="toggle-password" type="button" className="d-none" />
              <label for="passwordInput">Password</label>
            </div>
          </div>
        </div>


        <div className="row justify-content-center py-2">
          <div className="col-4">
            <div className="d-grid gap-2">
              <button type='button' className="btn-md btn-primary" onClick={this.onLogin}>Login</button>
            </div>
          </div>
        </div>

        <div className="row justify-content-center py-2">
          <div className="col-4">
            <div className="d-grid gap-2">
              <button type='button' className="btn-md btn-primary" onClick={this.onCreateAccount}>Create Account</button>
            </div>
          </div>
        </div>

      </div>
    );
  }

}

async function generateEncryptedExportedSymmetricKey(exportedPubKey){

  /**
   * Import Public Key from server. It was given to use in JSON format for transmission over the wire.
   */
  let pubKey = await window.crypto.subtle.importKey("jwk", exportedPubKey, pubKeyAlgo, false, ["encrypt"]);


  /**
   * Create symmetric key that will be shared between client and server to achieve a 1-1 encrypted communications
   * channel. Symmetric key will be generated by the client and sent to the server encrypted with the servers public key.
   */
  let symmetricAlgo = {
    name : "AES-CTR",
    length : 128
  }
  
  let symmetricKey = await window.crypto.subtle.generateKey(symmetricAlgo, true,
    ['encrypt', 'decrypt']);
  let exportedSymmetricKey = await window.crypto.subtle.exportKey("jwk", symmetricKey);
  let exportedSymmetricKeyBuffer = Buffer.from(JSON.stringify(exportedSymmetricKey));

  let encryptedSymmetricKey = await window.crypto.subtle
    .encrypt({name: "RSA-OAEP"}, pubKey, exportedSymmetricKeyBuffer);

  // encode the key that is stored as bytes to base64 so that it can be transmitted via http.
  return Buffer.from(encryptedSymmetricKey).toString('base64');
  
}

  // Encryption is performed in "blocks". The data being encrypted is partitioned into equal
  // length blocks. Each block is encrypted with the key and another unique block of data we create.
  // The piece of data that is mixed into each block of data that we encrypt is known as the 'counter block'.
  // It's composed of two parts, one a randomly generated, one-time use number known as a 'nonce' and
  // a counter that is incremented for each block. Nonce ensures uniqueness of counter blocks across messages,
  // while counter ensures uniqueness within the same message.
  let encryptionParams = {
    name : "AES-CTR",
    counter: window.crypto.getRandomValues(new Uint16Array()), // 256 bits long
    length: 64 // defines length of counter, should be longer than the number of blocks the data gets partitioned into
  }